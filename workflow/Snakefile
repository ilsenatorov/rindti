import os
import os.path as osp


report: "report/workflow.rst"


configfile: "config/config.yaml"


targets = [x.split(".")[0] for x in os.listdir("resources/structures") if x.endswith(".pdb")]

if config["structures"] == "whole":
    rinerator_input = "resources/structures/{protein}.pdb"
    script_output = ""
else:
    rinerator_input = "results/parsed_structures_{structures}/{{protein}}.pdb".format(structures=config["structures"])
    script_output = "results/pymol_{structures}/{{protein}}.pml".format(structures=config["structures"])


rinerator_output = "results/rinerator_{structures}/{{protein}}/{{protein}}_h.sif".format(
    structures=config["structures"]
)

protein_output = "results/prepare_proteins/protein_data_{structures}_{node_feats}_{edge_feats}.pkl".format(
    structures=config["structures"],
    node_feats=config["prepare_proteins"]["node_feats"],
    edge_feats=config["prepare_proteins"]["edge_feats"],
)

split_data = "results/split_data/{split}_{filtering}_{task}_split.csv".format(
    split=config["split"]["method"],
    filtering=config["parse_dataset"]["filtering"],
    task=config["parse_dataset"]["task"],
)

transformer_output = "results/prepare_transformer/{node_feats}_transformer.pkl".format(
    node_feats=config["prepare_proteins"]["node_feats"]
)

final_output = "results/prepare_all/{split}_{filtering}_{task}_{structures}_{node_feats}_{edge_feats}.pkl".format(
    split=config["split"]["method"],
    structures=config["structures"],
    task=config["parse_dataset"]["task"],
    node_feats=config["prepare_proteins"]["node_feats"],
    edge_feats=config["prepare_proteins"]["edge_feats"],
    filtering=config["parse_dataset"]["filtering"],
)

plot_output = final_output.split("/")[-1].split(".")[0]
plot_output = "report/plot_summary/{out}.html".format(out=plot_output)


output = [final_output, plot_output]

### CHECK IF FILES ARE PRESENT ###

if osp.isdir("resources/templates"):
    templates = expand("resources/templates/{template}", template=os.listdir("resources/templates"))
else:
    if not config["only_proteins"] and config["structures"] != "whole":
        raise ValueError("No templates available")
    templates = []

if osp.isfile("resources/gnomad.csv"):
    gnomad = "resources/gnomad.csv"
    output.append(transformer_output)
else:
    gnomad = []

if osp.isdir("resources/drugs"):
    drugs = {x: "resources/drugs/{x}.tsv".format(x=x) for x in ["inter", "lig"]}
else:
    if not config["only_proteins"]:
        raise ValueError("No drug interaction data available, can't calculate final data!")
    drugs = {x: [] for x in ["inter", "ligands", "targets"]}

if config["only_proteins"]:  # Only calculate the data for the proteins
    output = [protein_output]


rule all:
    input:
        output,


rule create_pymol_scripts:
    input:
        expand("resources/structures/{protein}.pdb", protein=targets),
    output:
        scripts=expand(script_output, protein=targets),
    log:
        "results/logs/pymol_bsite.log",
    params:
        radius=config["bsite"]["radius"],
    message:
        "Creating bsite PyMOL scripts for all protein, logs are in {log}"
    script:
        "scripts/create_pymol_scripts.py"


rule run_pymol:
    input:
        script=script_output,
        struct="resources/structures/{protein}.pdb",
    output:
        structures=rinerator_input,
    log:
        "results/logs/run_pymol/{protein}.log",
    conda:
        "envs/pymol.yml"
    message:
        "Running PyMOL script for {wildcards.protein}, logs are in {log}"
    shell:
        """
        pymol -k -y -c {input.script} > {log} 2>&1
        """


rule save_structure_info:
    input:
        structs=expand(rinerator_input, protein=targets),
    output:
        tsv="results/structure_info/{type}_info.tsv".format(type=config["structures"]),
    script:
        "scripts/save_structure_info.py"


rule rinerator:
    input:
        pdb=rinerator_input,
    output:
        sif=rinerator_output,
    log:
        "results/logs/rinerator/{protein}.log",
    params:
        dir="results/rinerator_{structures}".format(structures=config["structures"]),
    message:
        "Running RINerator for {wildcards.protein}, logs are in {log}"
    shadow:
        "shallow"
    shell:
        """rinerator {input.pdb} {params.dir}/{wildcards.protein} > {log} 2>&1"""


rule parse_dataset:
    input:
        lig=drugs["lig"],
        inter=drugs["inter"],
    output:
        lig="results/parse_dataset/{filtering}_lig.csv".format(filtering=config["parse_dataset"]["filtering"]),
        inter="results/parse_dataset/{filtering}_inter.csv".format(filtering=config["parse_dataset"]["filtering"]),
    message:
        """Parsing the dataset

        Filtering is {config[parse_dataset][filtering]}
        Task is {config[parse_dataset][task]}
        Log is {config[parse_dataset][log]}
        Threshold is {config[parse_dataset][threshold]}
        """
    script:
        "scripts/parse_dataset.py"


rule prepare_proteins:
    input:
        rins=expand(rinerator_output, protein=targets),
    output:
        protein_pickle=protein_output,
    message:
        """
        Creating protein data.

        Structures config is {config[structures]}
        Node feature type is {config[prepare_proteins][node_feats]}.
        Edge feature type is {config[prepare_proteins][edge_feats]}.
        """
    script:
        "scripts/prepare_proteins.py"


rule split_data:
    input:
        inter=rules.parse_dataset.output.inter,
        lig=rules.parse_dataset.output.lig,
    output:
        split_data="results/split_data/{split}_{filtering}_split.csv".format(
            split=config["split"]["method"],
            filtering=config["parse_dataset"]["filtering"],
        ),
    message:
        "Splitting the dataset with {config[split][method]} method"
    script:
        "scripts/split_data.py"


rule prepare_drugs:
    input:
        lig=rules.parse_dataset.output.lig,
    output:
        drug_pickle="results/prepare_drugs/drug_data.pkl",
    message:
        "Encoding the drugs"
    script:
        "scripts/prepare_drugs.py"


rule prepare_all:
    input:
        drugs=rules.prepare_drugs.output.drug_pickle,
        proteins=rules.prepare_proteins.output.protein_pickle,
        inter=rules.split_data.output.split_data,
    output:
        combined_pickle=final_output,
    message:
        """
        Combining the final dataset.
        """
    script:
        "scripts/prepare_all.py"


rule prepare_transformer:
    input:
        gnomad=gnomad,
        prots=rules.prepare_proteins.output.protein_pickle,
    output:
        transformer_pickle=transformer_output,
    script:
        "scripts/prepare_transformer.py"


rule plot_summary:
    input:
        pickle=rules.prepare_all.output.combined_pickle,
        struct_info=rules.save_structure_info.output.tsv,
    output:
        html=plot_output,
    script:
        "scripts/plot_summary.py"
