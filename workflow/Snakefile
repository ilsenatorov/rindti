import os
import os.path as osp


report: "report/workflow.rst"
configfile: "config/config.yaml"
targets = [x.split(".")[0] for x in os.listdir("resources/structures")]

if config["rinerator"] == "whole":
    rinerator_dir = "results/rinerator_whole"
else:
    rinerator_dir = "results/rinerator_bsite"

### DEFINE OUTPUTS ###

protein_output = "results/prepare_proteins/protein_data_{rinerator}_{features}_{data}.pkl".format(
            rinerator="whole" if config['rinerator'] == 'whole' else 'bsite{x}'.format(x=config['bsite']['radius']),
            features=config["prepare_proteins"]["features"],
            data=config['prepare_proteins']['data'])

split_data = "results/split_data/{split}_{filtering}_split.csv".format(
            split=config["split"]["method"],
            filtering= config['parse_glass']['filtering'])

transformer_output = 'results/prepare_transformer/{features}_transformer.pkl'.format(features=config["prepare_proteins"]["features"])

final_output = "results/prepare_all/{split}_{protein_data}_{rinerator}_{features}_{filtering}_{type}.pkl".format(
    split=config["split"]["method"],
    protein_data=config["prepare_proteins"]["data"],
    rinerator="whole" if config['rinerator'] == 'whole' else 'bsite{x}'.format(x=config['bsite']['radius']),
    features=config["prepare_proteins"]["features"],
    filtering= config['parse_glass']['filtering'],
    type="class" if config["prepare_all"]["threshold"] else "regress",
)

plot_output = final_output.split('/')[-1].split(".")[0]
plot_output = 'report/plot_summary/{out}.html'.format(out=plot_output)


if config["prepare_proteins"]["data"] == "graph":
    prepare_proteins_rin_input = expand(osp.join(rinerator_dir, "{protein}", "{protein}_h.sif"), protein=targets)
else:
    prepare_proteins_rin_input = []

output = [final_output, plot_output]

### CHECK IF FILES ARE PRESENT ###

if osp.isdir('resources/templates'):
    templates = expand("resources/templates/{template}", template=os.listdir('resources/templates'))
else:
    if not config['only_proteins'] and config['rinerator'] == 'bsite':
        raise ValueError("No templates available, can't run binding site calculation")
    templates = []

if osp.isfile('resources/gnomad.csv'):
    gnomad = 'resources/gnomad.csv'
    output.append(transformer_output)
else:
    if not config['only_proteins']:
        raise ValueError("No gnomad available, can't create gnomad transformer")
    gnomad = []

if osp.isdir('resources/drugs'):
    drugs = {x:'resources/drugs/{x}.tsv'.format(x=x) for x in ['inter', 'ligands', 'targets']}
else:
    if not config['only_proteins']:
        raise ValueError("No drug interaction data available, can't calculate final data!")
    drugs = {x:[] for x in ['inter', 'ligands', 'targets']}

if config['only_proteins']: # Only calculate the data for the proteins
    output = [protein_output]

rule all:
    input:
        output,


rule create_protein_list:
    input:
        ancient(expand("resources/structures/{protein}.pdb", protein=targets)),
    output:
        protein_list="results/protein_list.txt",
    log:
        "results/logs/create_protein_list.log",
    script:
        "scripts/create_protein_list.py"



rule pymol_script:
    input:
        expand("resources/structures/{protein}.pdb", protein=targets),
    output:
        script=expand(osp.join("results/pymol_scripts", "{protein}.pml"), protein=targets),
    log:
        "results/logs/pymol_script.log",
    params:
        radius=config["bsite"]["radius"],
    message:
        "Creating PyMOL scripts for all protein, logs are in {log}"
    script:
        "scripts/pymol_script.py"


rule run_pymol:
    input:
        script="results/pymol_scripts/{protein}.pml",
    output:
        rinhelpers="results/run_pymol/{protein}_rinhelper.txt",
    log: "results/logs/run_pymol/{protein}.log",
    conda: "envs/pymol.yml"
    message: "Running PyMOL script for {wildcards.protein}, logs are in {log}"
    shell:
        """
        pymol -k -y -c {input.script} > {log} 2>&1
        """


rule rinerator_bsite:
    input:
        pockets=rules.run_pymol.output.rinhelpers,
        pdb=osp.join("resources/structures", "{protein}.pdb"),
    output:
        sif=osp.join("results/rinerator_bsite", "{protein}", "{protein}_h.sif"),
    log:
        "results/logs/rinerator_bsite/{protein}.log",
    message:
        "Running RINerator for bsite of {wildcards.protein}, logs are in {log}"
    shadow:
        "shallow"
    shell:
        """rinerator {input.pdb} results/rinerator_bsite/{wildcards.protein} --segments-file {input.pockets} > {log} 2>&1"""


rule rinerator_whole:
    input:
        pdb = osp.join("resources/structures", "{protein}.pdb"),
    output:
        sif = osp.join("results/rinerator_whole", "{protein}", "{protein}_h.sif"),
    log:
        "results/logs/rinerator_whole/{protein}.log",
    message:
        'Running RINerator for the whole {wildcards.protein}, logs are in {log}'
    shadow:
        'shallow'
    shell:
        """rinerator {input.pdb} results/rinerator_whole/{wildcards.protein} > {log} 2>&1"""

rule calculate_druglikeness:
    input:
        lig = drugs['ligands']
    output:
        lig="results/calculate_druglikeness/ligands.csv",
    message:
        "Calculating druglikeness for all drugs"
    script:
        "scripts/calculate_druglikeness.py"


rule parse_glass:
    input:
        lig=rules.calculate_druglikeness.output.lig,
        inter=drugs['inter'],
        targ=drugs['targets'],
    output:
        lig="results/parse_glass/{filtering}_lig.csv".format(
            filtering= config['parse_glass']['filtering'],
        ),
        inter="results/parse_glass/{filtering}_inter.csv".format(
            filtering= config['parse_glass']['filtering'],
        ),
        targ="results/parse_glass/{filtering}_targ.csv".format(
            filtering= config['parse_glass']['filtering'],
        ),
        log="results/parse_glass/log.pkl", # report_html = 'report/parse_glass.html',
         # report_png = report('report/parse_glass.png',
         #         caption='report/parse_glass.rst',
         #         category='GLASS dataset'),
    message:
        """Parsing the GLASS database"""
    script:
        "scripts/parse_glass.py"


rule prepare_proteins:
    input:
        rins = prepare_proteins_rin_input,
        # fingerprints=prepare_proteins_fingerprint_input,
        # targ=rules.parse_glass.output.targ,
    output:
        protein_pickle = protein_output
    message:
        """
        Creating protein data.
        Coverage parameter is {config[rinerator]}.
        Species parameter is {config[parse_glass][species]}.
        Data type is {config[prepare_proteins][data]}.
        Feature type is {config[prepare_proteins][features]}.
        """
    script:
        "scripts/prepare_proteins.py"


rule split_data:
    input:
        inter=rules.parse_glass.output.inter,
        lig=rules.parse_glass.output.lig,
    output:
        split_data="results/split_data/{split}_{filtering}_split.csv".format(
            split=config["split"]["method"],
            filtering= config['parse_glass']['filtering'],

        ),
    message:
        "Splitting the dataset with {config[split][method]} method"
    script:
        "scripts/split_data.py"


rule prepare_drugs:
    input:
        lig=rules.parse_glass.output.lig,
    output:
        drug_pickle="results/prepare_drugs/drug_data.pkl",
    message:
        "Encoding the drugs"
    script:
        "scripts/prepare_drugs.py"

rule prepare_all:
    input:
        drugs=rules.prepare_drugs.output.drug_pickle,
        proteins=rules.prepare_proteins.output.protein_pickle,
        inter=rules.split_data.output.split_data,
    output:
        combined_pickle = final_output,
    message:
        """
        Combining the final dataset.
        Threshold is {config[prepare_all][threshold]}
        """
    script:
        "scripts/prepare_all.py"

rule prepare_transformer:
    input:
        gnomad = gnomad,
        prots = rules.prepare_proteins.output.protein_pickle,
    output:
        transformer_pickle = transformer_output
    script:
        "scripts/prepare_transformer.py"

rule plot_summary:
    input:
        pickle = rules.prepare_all.output.combined_pickle
    output:
        html = plot_output
    script:
        'scripts/plot_summary.py'
